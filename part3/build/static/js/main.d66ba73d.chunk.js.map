{"version":3,"sources":["components/Note.js","services/Note.js","components/Notification.js","App.js","index.js"],"names":["Note","note","toggleImportance","label","important","className","content","onClick","request","axios","get","nonExisting","id","date","Date","toISOString","then","response","data","concat","newObject","post","put","Notification","message","App","useState","notes","setNotes","newNote","setNewNote","showAll","setShowAll","errorMessage","setErrorMessage","useEffect","noteService","intialData","notesToShow","filter","map","key","find","n","changedNote","returnedNote","catch","error","setTimeout","toggleImportanceOf","onSubmit","event","preventDefault","newNoteObject","Math","random","value","onChange","target","type","ReactDOM","render","document","getElementById"],"mappings":"mNAaeA,EAXJ,SAAC,GAA2B,IAA1BC,EAAyB,EAAzBA,KAAKC,EAAoB,EAApBA,iBAEVC,EAAQF,EAAKG,UAAY,qBAAuB,iBACtD,OACE,wBAAIC,UAAU,QACXJ,EAAKK,QACN,4BAAQC,QAASL,GAAmBC,K,gBCgB3B,EArBF,WACT,IAAMK,EAAQC,IAAMC,IAHV,cAIJC,EAAY,CACdC,GAAG,IACHN,QAAQ,0BACRO,MAAK,IAAIC,MAAOC,cAChBX,WAAU,GAEd,OAAOI,EAAQQ,MAAK,SAAAC,GAAQ,OAAEA,EAASC,KAAKC,OAAOR,OAaxC,EAVF,SAACS,GAEV,OADcX,IAAMY,KAdV,aAcuBD,GAClBJ,MAAK,SAAAC,GAAQ,OAAEA,EAASC,SAQ5B,EALF,SAACN,EAAGQ,GAEb,OADeX,IAAMa,IAAN,UAnBL,aAmBK,YAAwBV,GAAKQ,GAC7BJ,MAAK,SAAAC,GAAQ,OAAEA,EAASC,SCR5BK,EAZI,SAAC,GAAa,IAAZC,EAAW,EAAXA,QACjB,OAAa,OAAVA,EACQ,KAIP,yBAAKnB,UAAU,SACVmB,IC6EGC,EAhFN,WAAK,IAAD,EACWC,mBAAS,IADpB,mBACLC,EADK,KACCC,EADD,OAEeF,mBAAS,IAFxB,mBAELG,EAFK,KAEGC,EAFH,OAGeJ,oBAAS,GAHxB,mBAGLK,EAHK,KAGGC,EAHH,OAIyBN,mBAAS,MAJlC,mBAILO,EAJK,KAIQC,EAJR,KAMZC,qBAAU,WACNC,IAEGpB,MAAK,SAAAqB,GACJT,EAASS,QAEd,IAGH,IA6CMC,EAAYP,EAAUJ,EAAQA,EAAMY,QAAO,SAACtC,GAAD,OAAyB,IAAjBA,EAAKG,aAG9D,OACE,6BACE,qCACA,kBAAC,EAAD,CAAcoB,QAASS,IAC3B,4BAAQ1B,QAbiB,WACvByB,GAAYD,KAYd,QAA2CA,EAAU,YAAY,OAC7D,4BACGO,EAAYE,KAAI,SAACvC,GAAD,OACf,kBAAC,EAAD,CAAMwC,IAAKxC,EAAKW,GAAIX,KAAMA,EAAMC,iBAAkB,kBAvCjC,SAACU,GACxB,IAAMX,EAAK0B,EAAMe,MAAK,SAAAC,GAAC,OAAEA,EAAE/B,KAAKA,KAC1BgC,EAAY,eAAI3C,EAAL,CAAUG,WAAWH,EAAKG,YAC3CgC,EACYxB,EAAGgC,GACV5B,MAAK,SAAA6B,GACJjB,EAASD,EAAMa,KAAI,SAAAvC,GAAI,OAAEA,EAAKW,KAAKA,EAAKX,EAAK4C,SAE9CC,OAAM,SAAAC,GACLb,EAAgB,SAAD,OAAUjC,EAAKK,QAAf,0CACf0C,YAAW,WACTd,EAAgB,QAChB,KACFN,EAASD,EAAMY,QAAO,SAAAI,GAAC,OAAEA,EAAE/B,KAAKA,SA0BsBqC,CAAmBhD,EAAKW,WAGlF,0BAAMsC,SA1DI,SAACC,GACbA,EAAMC,iBACN,IAAMC,EAAc,CAClB/C,QAAQuB,EACRhB,MAAK,IAAIC,MAAOC,cAChBX,UAAUkD,KAAKC,SAAW,IAE5BnB,EACYiB,GACPrC,MAAK,SAAA6B,GACJjB,EAASD,EAAMR,OAAO0B,IACtBf,EAAW,SAgDb,2BAAO0B,MAAO3B,EAAS4B,SAzBV,SAACN,GAChBrB,EAAWqB,EAAMO,OAAOF,UAyBtB,4BAAQG,KAAK,UAAb,W,MC5ERC,IAASC,OAAO,kBAAC,EAAD,MAAQC,SAASC,eAAe,W","file":"static/js/main.d66ba73d.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Note=({note,toggleImportance})=>{\r\n\r\n  const label = note.important ? 'make not important' : 'make important'\r\n  return (\r\n    <li className='note'>\r\n      {note.content}\r\n      <button onClick={toggleImportance}>{label}</button>\r\n      </li>\r\n  )\r\n}\r\n\r\nexport default Note\r\n","import axios from 'axios'\r\nconst baseUrl='/api/notes'\r\n\r\nconst getAll=()=>{\r\n    const request=axios.get(baseUrl)\r\n    const nonExisting={\r\n        id:10000,\r\n        content:'This note doesnot exist',\r\n        date:new Date().toISOString(),\r\n        important:true\r\n    }\r\n    return request.then(response=>response.data.concat(nonExisting))\r\n}\r\n\r\nconst create=(newObject)=>{\r\n    const request=axios.post(baseUrl,newObject)\r\n    return request.then(response=>response.data)\r\n}\r\n\r\nconst update=(id,newObject)=>{\r\n    const request= axios.put(`${baseUrl}/${id}`,newObject)\r\n    return request.then(response=>response.data)\r\n}\r\n\r\nexport default {\r\n    getAll,\r\n    create,\r\n    update\r\n}","import React from 'react'\r\nconst Notification=({message})=>{\r\n    if(message===null){\r\n        return null\r\n    }\r\n\r\n    return(\r\n        <div className='error'>\r\n            {message}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Notification","import React, { useState,useEffect } from 'react'\r\nimport Note from './components/Note'\r\nimport noteService from './services/Note'\r\nimport Notification from './components/Notification'\r\n\r\nconst App=()=>{\r\n  const [notes,setNotes]=useState([])\r\n  const [newNote,setNewNote]=useState('')\r\n  const [showAll,setShowAll]=useState(true)\r\n  const [errorMessage,setErrorMessage]=useState(null)\r\n\r\n  useEffect(() => {\r\n      noteService\r\n        .getAll()\r\n        .then(intialData=>{\r\n          setNotes(intialData)\r\n        })\r\n  }, [])\r\n\r\n\r\n  const addNote=(event)=>{\r\n    event.preventDefault()\r\n    const newNoteObject={\r\n      content:newNote,\r\n      date:new Date().toISOString(),\r\n      important:Math.random() > 0.5\r\n    }\r\n    noteService\r\n        .create(newNoteObject)\r\n        .then(returnedNote=>{\r\n          setNotes(notes.concat(returnedNote))\r\n          setNewNote('')\r\n        })  \r\n  }\r\n\r\n\r\n  const toggleImportanceOf=(id)=>{\r\n    const note=notes.find(n=>n.id===id)\r\n    const changedNote={...note,important:!note.important}\r\n    noteService\r\n        .update(id,changedNote)\r\n        .then(returnedNote=>{\r\n          setNotes(notes.map(note=>note.id!==id ? note:returnedNote))\r\n        })\r\n        .catch(error=>{\r\n          setErrorMessage(`Note '${note.content}' was already removed from the server`)\r\n          setTimeout(()=>{\r\n            setErrorMessage(null)\r\n          },5000)\r\n          setNotes(notes.filter(n=>n.id!==id))\r\n        })\r\n  }\r\n\r\n\r\n  const handleChange=(event)=>{\r\n      setNewNote(event.target.value)\r\n  }\r\n\r\n\r\n  const handleNotesDisplay=()=>{\r\n    setShowAll(!showAll)\r\n\r\n  }\r\n\r\n\r\n  const notesToShow=showAll ? notes : notes.filter((note)=>note.important===true)\r\n  \r\n  \r\n  return(\r\n    <div>\r\n      <h1>Notes</h1>\r\n      <Notification message={errorMessage}/>\r\n  <button onClick={handleNotesDisplay}>show {showAll ? 'important':'all'}</button>\r\n      <ul>\r\n        {notesToShow.map((note)=>\r\n          <Note key={note.id} note={note} toggleImportance={()=>toggleImportanceOf(note.id)}/>\r\n        )}\r\n      </ul>\r\n      <form onSubmit={addNote}>\r\n        <input value={newNote} onChange={handleChange}/>\r\n        <button type=\"submit\" >save</button>\r\n      </form>\r\n    </div>\r\n  )\r\n}\r\n export default App","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App'\nimport './index.css'\nReactDOM.render(<App />,document.getElementById('root'))\n\n\n\n\n"],"sourceRoot":""}